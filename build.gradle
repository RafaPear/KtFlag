plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.1.20'
    id 'java-library'
    id 'org.jetbrains.dokka' version '2.1.0'
}

group = 'pt.rafap.ktflag'
version = '1.4.1'

repositories {
    mavenCentral()
}

subprojects {
    apply plugin: 'org.jetbrains.dokka'
}

dependencies {
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
}

test {
    useJUnitPlatform()
}

java {
    withSourcesJar()
    withJavadocJar()
}

// directoria para guardar o ficheiro version.properties gerado
def generatedVersionDir = layout.buildDirectory.dir('generated-version').get().asFile.path

sourceSets {
    main {
        java.srcDirs += 'src/main/java'
        output.dir(generatedVersionDir, builtBy: 'generateVersionProperties')
    }
    example {
        kotlin.srcDir("src/example/kotlin")
        resources.srcDir("src/example/resources")
        compileClasspath += sourceSets.main.output + configurations.runtimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

// gera ficheiro version.properties em tempo de build
tasks.register('generateVersionProperties') {
    doLast {
        def propertiesFile = file("${generatedVersionDir}/version.properties")
        propertiesFile.parentFile.mkdirs()
        def properties = new Properties()
        properties.setProperty('version', rootProject.version.toString())
        propertiesFile.withWriter { properties.store(it, null) }
    }
}

processResources.dependsOn tasks.named('generateVersionProperties')

tasks.configureEach { task ->
    if (task.name.startsWith("dokka")) {
        task.configure {
            // Propriedades principais (nem todas as tasks suportam todas)
            if (hasProperty("moduleName")) moduleName = project.name
            if (hasProperty("moduleVersion")) moduleVersion = project.version.toString()
            if (hasProperty("failOnWarning")) failOnWarning = false
            if (hasProperty("suppressObviousFunctions")) suppressObviousFunctions = true
            if (hasProperty("suppressInheritedMembers")) suppressInheritedMembers = false
            if (hasProperty("offlineMode")) offlineMode = false
        }
    }
}

// Após avaliar o projeto, liga as tasks da Dokka aos artefactos
project.afterEvaluate {
    def dokkaTask = tasks.named("dokkaGeneratePublicationHtml")
            ?: tasks.named("dokkaHtml")
            ?: tasks.named("dokkaGenerate")

    if (dokkaTask != null) {
        tasks.named("javadocJar") {
            dependsOn(dokkaTask)
            from(layout.buildDirectory.dir("dokka/html"))
        }

        tasks.named("jar") {
            dependsOn(dokkaTask)
            from(layout.buildDirectory.dir("dokka/html")) {
                into("docs")
            }
        }
    } else {
        logger.warn("⚠️ Nenhuma task Dokka encontrada; javadocJar/jar não irão incluir documentação Dokka.")
    }
}

// evita falhas por ficheiros duplicados em todas as tasks do tipo Jar
tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

kotlin {
    jvmToolchain(21)
}

// task de exemplo para correr a CLI
tasks.register("runExample", JavaExec) {
    group = "application"
    description = "Runs the CLI example"
    classpath = sourceSets.example.runtimeClasspath
    mainClass.set("MainKt")
}

// força saída de todas as DokkaTasks para build/dokka/html
tasks.configureEach { task ->
    if (task.name.startsWith("dokka")) {
        task.configure {
            if (hasProperty("outputDirectory")) {
                outputDirectory.set(layout.buildDirectory.dir("dokka/html"))
            } else if (hasProperty("outputDir")) {
                outputDir.set(layout.buildDirectory.dir("dokka/html"))
            }
        }
    }
}